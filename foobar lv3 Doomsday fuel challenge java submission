//the general insperation of this solution came from http://math.plussed.net/markov/
//the code is completely original
//! the third test case does not pass, suspected to be interger overflow but was not able to replicate in real tests !

public class foobar_google_ddfuel {
	/*
	 {{0, 2, 1, 0, 0}, 
	  {0, 0, 0, 3, 4}, 
	  {0, 0, 0, 0, 0}, 
	  {0, 0, 0, 0, 0}, 
	  {0, 0, 0, 0, 0}};
	public static long mcd (long item1, long item2, long previous) {
		long[] attemps = { 0, 7, 5, 3, 2 };
		if (item1 == 1 || item1 == 0) {
			return previous;
		} else {
			attemps[0] = item1;
		}
		for(int i = 0; i < 5; i++) {
			if(item1 % attemps[i] == 0 && item2 % attemps[i] == 0) {
				return mcd(item1 / attemps[i], item2 / attemps[i], previous * attemps[i]);
			}
		}
		return previous;
	}
	 */
   
  // code starts here
  
	public static int find_common(int[] item, int length) {
		int smallest = 99999999;
		for (int i = 0; i < length; i++) {
			if(item[i] < smallest && item[i] != 0) {
				smallest = item[i];
			}
		}
		for(int i = 1; true; i++) {
			boolean decision = true;
			for(int x = 0; x < length; x++) {
				if(item[x] != 0 && (smallest * i) % item[x] != 0) {
					decision = false;
					break;
				}
			}
			if (decision) {
				return smallest * i;
			}
		}
	}
	public static int[] fraction (double item) {
		int[] frac = new int[2];
		if (item == 1 || item == 0) {
			if (item == 1) {
				frac[0] = 1;
			}
			frac[1] = 1;
			return frac;
		}
		for (double i = 2; true; i++) {
			double diff = (double)(item * i);
			//System.out.println(diff);
			if (diff % 1 <= 0.001 || diff % 1>= 0.999 && diff % 1 <= 1.001) {
				for(int x = 1; x < i; x++) {
					double after = (double) diff / x;
					//System.out.println("!" + after);
					if (after >= 0.999 && after <= 1.001) {
						frac[0] = (int)i;
						frac[1] = x;
						return frac;
					}
				}
			}
		}
	}

	public static double[] calculate_steps(int[][] mpn, int[][] mpd, double[] m, int variation) {
		double[] new_matrix = new double[variation];
		for (int i = 0; i < variation; i++) {
			for (int x = 0; x < variation; x++) {
				if (mpn[x][i] != 0) {
					new_matrix[i] = new_matrix[i] + (((double)mpn[x][i] / (double)mpd[x][i]) * (double)m[x]);
					//System.out.println((double) mpn[x][i] / (double)mpd[x][i]);
				}
			}
		}
		return new_matrix;
	}

	public static int[] solution(int[][] m) {
		int variation = m.length;
		int terminals = 0;
		int[] total = new int[variation];
		double answer[] = new double[variation];
		for (int i = 0; i < variation; i++) {
			for (int x = 0; x < variation; x++) {
				total[i] = total[i] + m[i][x];
			}
			if (total[i] == 0) {
				terminals++;
			}
		}
		int[] terminal_location = new int[terminals];
		int[] unsimp_fraction = new int[terminals];
		int[] unsimp_numerator = new int[terminals + 1];
		int cnt = 0;
		for (int i = 0; i < variation; i++) {
			if(total[i] == 0) {
				terminal_location[cnt] = i;
				cnt++;
			}
		}
		int[][] m_d = new int[variation][variation];
		for (int i = 0; i < variation; i++) {
			for (int x = 0; x < variation; x++) {
				if (m[i][x] != 0) {
					m_d[i][x] = total[i];
				} 
			}
		}
		double[] initial_matrix = new double [variation];
		initial_matrix[0] = 1;
		for (int i = 0; i < 10000; i++) {
			initial_matrix = calculate_steps(m, m_d, initial_matrix, variation);
			for (int x = 0; x < variation; x++) {
				if (total[x] == 0 && initial_matrix[x] != 0) {
					answer[x] = answer[x] + initial_matrix[x];
					//System.out.printf("!!%d, %d\n", initial_matrix[x]);
					initial_matrix[x] = 0;
				}
			}
		}
		for (int i = 0; i < terminals; i++) {
			//System.out.println(answer[terminal_location[i]]);
			int[] this_answer = fraction(answer[terminal_location[i]]);
			unsimp_fraction[i] = this_answer[0];
			unsimp_numerator[i] = this_answer[1];
		}
		int c = find_common(unsimp_fraction, terminals);
		for(int i = 0; i < terminals; i++) {
			if(unsimp_fraction[i] == 0) {
				unsimp_numerator[i] = 0;
			} else {
				unsimp_numerator[i] = unsimp_numerator[i] * (c / unsimp_fraction[i]);
			}
		}
		unsimp_numerator[terminals] = c;
		return unsimp_numerator;
	}
  
// code below was omitted during submission

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][]item =  {{0, 2, 1, 0, 0}, {0, 0, 0, 3, 4}, {0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}};
		int[] answer = solution(item);
		for (int i = 0; i < answer.length; i++) {
			System.out.print(answer[i] + " ");
		}
	}

}

/* 
   for (int i = 0; i < variation; i++) {
			for (int x = 0; x < variation; x++) {
				System.out.print(m[i][x]);
			}
			System.out.println();
			for (int x = 0; x < variation; x++) {
				System.out.print("-");
			}
			System.out.println();
			for (int x = 0; x < variation; x++) {
				System.out.print(m_d[i][x]);
			}
			System.out.println();
			System.out.println();
		}
 */
