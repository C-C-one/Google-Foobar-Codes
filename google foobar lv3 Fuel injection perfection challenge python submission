//the code and method is completely original
//the code will pass the tests
//i learned python about 3h ago, might not be the most efficient implimentation

''' 
explination:
There are 3 possible step, x = 2x, x + 1, x - 1. The quickest way to increase the number is to multiply. Thus i start off multiplying 
The starting number: 1 by 2 infinite times until the number closest to the answer n, recording the step number it takes to achieve
the answer. And i find the difference between the closest answer and the desinated answer. Passing the difference in again to find 
the number closest to the differene. Any other step only require 1 single step, as adding or removing 1 mid way will accumulate. 
The loop will end at 1.
'''

def smallestdiff(n) :
    step = 1
    at = 1
    prev_answer = 0;
    previous_diff = n - 1
    if (n == 0) :
        return 0, 0
    while 1:
        if (prev_answer == 0) :
            prev_answer = 1
        at = at * 2
        new_diff = abs(n - at)
        if (new_diff + prev_answer >= n) :
            return previous_diff, step
        previous_diff = new_diff
        prev_answer = at;
        step = step + 1

    
def solution(n):
    item = int(n)
    if (item == 1) :
        return 0;
    item, saved= smallestdiff(item)
    count = saved - 1
    while 1:
        item, new = smallestdiff(item)
        if (new == 0) :
            return count;
        elif (item == 0) :
            return count + 1;
        saved = new
        count = count + 1
        
